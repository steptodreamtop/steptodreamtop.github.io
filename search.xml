<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA几个实用小技巧</title>
      <link href="/2019/04/20/IDEA%E5%87%A0%E4%B8%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/04/20/IDEA%E5%87%A0%E4%B8%AA%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>工欲善其事必先利其器，分享一些官网的说明文档上没提及的但开发中比较实用的IDEA技巧，如果你有好的知识分享，欢迎加入我们。<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;<img src="/img/IDEA/00.jpg" alt="avatar"><br><a id="more"></a><br>IDEA官网：<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/</a><br>文档：<a href="http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-introduce.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/keymap-introduce.html</a><br>本次分享使用的IDEA版本：<br><img src="/img/IDEA/1.jpg" alt="avatar"><br>一、可以增加开发和阅读源码效率的插件<br>JRebel<br><img src="/img/IDEA/2.jpg" alt="avatar"><br>官网地址：<a href="https://jrebel.com/software/jrebel/" target="_blank" rel="noopener">https://jrebel.com/software/jrebel/</a><br>说明：在开发过程中，免去了修改代码后rebuild、reload、redeploy的过程，和传统方式相比JRebel会直接重载class到JVM中， 大量节省开发时间。</p><p>二.几个好用的快捷键</p><pre><code>1. Ctrl+Alt+H 显示方法调用的层次</code></pre><p><img src="/img/IDEA/3.jpg" alt="avatar"></p><ol start="2"><li>Ctrl+Shift+F8 一次取消所有断点<br><img src="/img/IDEA/4.jpg" alt="avatar"><br>3.Ctrl+F9 修改代码后，执行编译操作</li></ol><p>三.Debug中的一些技巧</p><ol><li><p>F8和F9不过多介绍了，一个是单步执行和运行到下一断点，基本IDEA的用户都知道</p></li><li><p>Shift+F7 选择性步入源码的具体实现，可以人为选择具体进入哪个方法的源码实现<br><img src="/img/IDEA/5.jpg" alt="avatar"></p></li><li>Alt+F9  让断点运行至光标所在的行，好处：不用在该行打断点即可实现<br><img src="/img/IDEA/6.jpg" alt="avatar"></li><li>Alt+鼠标左键 快速查看变量的值<br><img src="/img/IDEA/7.jpg" alt="avatar"></li><li>多线程调试 这个的应用场景比如开发环境有类似dubbo+zk的架构，由于负载均衡原因别的小伙伴调用接口时进入有断点的本地调试机器，会导致想发起另外一个请求都无法进行了，出现这个问题是因为IDEA在Debug时默认的阻塞级别是ALL，会阻塞其它线程，也就是说要等当前调试线程走完时才会走其它线程，这个提供一个小技巧可以解决这个问题，Ctrl+Shift+F8进入断点设置视图，Suspend选Thread，即可进行多线程调试<br><img src="/img/IDEA/8.jpg" alt="avatar"></li><li>断点回退 有时候常因为不小心错过了想看的代码行数，断点调试界的后悔药<br><img src="/img/IDEA/9.jpg" alt="avatar"></li></ol><p>如果您觉得这些小技巧对你有用，如果您也同样热衷于分享，欢迎关注：源码精品分享，我们期待您的加入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Fiddler手机抓包在实际开发中的应用</title>
      <link href="/2019/04/19/%E6%B5%85%E8%B0%88Fiddler%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/04/19/%E6%B5%85%E8%B0%88Fiddler%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平常的开发中，经常需要通过抓包来分析手机或者页面发出的请求，Fiddler是一个很好用的抓包工具，可以将网络传输发送与接受的数据包进行截获、重发、编辑、转存等操作。对于工作原理什么的可以自行google，由于在WEB开发中，google自带的开发者工具大部分可以满足开发的抓包需求了，所以我这篇文章主要分享一下在手机抓包在实际开发中使用的心得。<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img src="/img/Fiddler/0.jpg" alt="avatar"><br><a id="more"></a><br>1.Fiddler下载</p><p>官网链接：<a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">https://www.telerik.com/fiddler</a></p><p>英文文档链接：<a href="http://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler" target="_blank" rel="noopener">http://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler</a></p><p>2.Fillder界面介绍及参数配置</p><p>（1）找到Tools-&gt;Fiddler Options-&gt;Connections,将Allow remote computer to connect 选中，点击OK，这是为了能够捕获远程设备上的请求而勾选的。<br><img src="/img/Fiddler/2.jpg" alt="avatar"><br>（2）在HTPPS中勾选【Capture HTTPS CONNECTS】<br><img src="/img/Fiddler/1.jpg" alt="avatar"><br>（3）将软件退出然后重启</p><p>3.手机端配置，以安卓手机为例介绍</p><p>（1）首先需要确保手机端和安装Fiddler软件的电脑在同一局域网，我是连的公司内网WIFI，配置手机代理前，先在电脑端的Fiddler页面的右上角鼠标悬浮online查看机器的IP<br><img src="/img/Fiddler/3.jpg" alt="avatar"><br>（2）进行手机端代理设置，选择代理配置方式为手动，服务器IP为上一步查看的安装Fiddler机器的IP，端口设置为8888<br><img src="/img/Fiddler/4.jpg" alt="avatar"><br>（3）在手机端操作需要抓包调试的软件，可查看Fiddler已执行抓包请求<br><img src="/img/Fiddler/5.jpg" alt="avatar"><br><img src="/img/Fiddler/6.jpg" alt="avatar"><br><img src="/img/Fiddler/7.jpg" alt="avatar"><br><img src="/img/Fiddler/8.jpg" alt="avatar"><br><img src="/img/Fiddler/9.jpg" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
